{"./":{"url":"./","title":"Introduction","keywords":"","body":"LYF_Records LYF's gitbook repository. This book will markdown my experience on development. Quick start Prerequisite NodeJS(v4.0.0+) Git Clone this repository $ git clone https://git.dev.tencent.com/liyf721866/liyf_gitbook.git Install gitbook $ npm i -g gitbook-cli Install Plugins $ gitbook install Preview $ gitbook serve $ chrome http://localhost:4000 Generate this book $ gitbook build Copyright © LYF_Studio 2019 all right reserved，powered by GitbookLast Edit: 2019-04-08 10:09:52 "},"Git/":{"url":"Git/","title":"Git","keywords":"","body":"Git 官网: Git 官网 Git 中文文档 辅助网站: 菜鸟教程 Webpack入门 Imooc 版本管理工具介绍—Git篇 Git 简明指南 Copyright © LYF_Studio 2019 all right reserved，powered by GitbookLast Edit: 2019-04-08 09:49:14 "},"Gitbook/":{"url":"Gitbook/","title":"Gitbook","keywords":"","body":"Gitbook Copyright © LYF_Studio 2019 all right reserved，powered by GitbookLast Edit: 2019-04-08 09:57:19 "},"Gitbook/GitbookExpandableChapters.html":{"url":"Gitbook/GitbookExpandableChapters.html","title":"Gitbook 设置折叠目录","keywords":"","body":"Gitbook 设置折叠目录 如果有多个目录，Gitbook在浏览器上打开时，默认所有的目录都会打开，当目录比较多时，全部显示不利于阅读。 可以使用插件配置目录折叠，使得打开浏览器时这些目录默认是关闭的。 在执行gitbook init主目录下增加book.json文件做定制化配置 配置目录折叠功能如下： { 　　\"plugins\":[ 　　　　\"expandable-chapters\" 　　] } 然后在主目录下用命令行执行 $ gitbook install 会生成node_modules文件夹，配置的插件也会自动下载到该目录下。 在SUMMARY.md文件中配置目录时直接配置目录名称即可，不用配置连接地址，如下: 　　[目录名称]() 启动后查看即可达到预期。 除此之外，如果目录内容比较多，左边菜单栏显示不下，也可以使用插件来达到放大菜单栏宽度的目的 插件：在book.json中配置splitter，后续步骤与以上一致 　　 除了在book.json中配置外，还可以直接使用命令进行安装，如：npm install gitbook-plugin-splitter。为维护方便，推荐使用book.json文件进行配置。 更多详情,可查看 gitbook插件官网地址 Copyright © LYF_Studio 2019 all right reserved，powered by GitbookLast Edit: 2019-04-08 09:58:18 "},"Webpack/":{"url":"Webpack/","title":"Webpack","keywords":"","body":"Webpack 本文内容主要摘自 Webpack 中文文档 基本概念 本质上，webpack 是一个现代 JavaScript 应用程序的静态模块打包器(module bundler)。当 webpack 处理应用程序时，它会递归地构建一个依赖关系图(dependency graph)，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 bundle。 链接 官网: Webpack 官网 Webpack 中文文档 辅助网站: 菜鸟教程 Webpack入门 Imooc webpack深入与实战 Copyright © LYF_Studio 2019 all right reserved，powered by GitbookLast Edit: 2019-04-08 09:49:37 "},"NodeJS/":{"url":"NodeJS/","title":"NodeJS","keywords":"","body":"NodeJS Node 官方网站: NodeJS 官网 NodeJS 中文网 NodeJS API文档 相关网站: NodeJS 菜鸟教程 imooc 进击Node.js基础（一） imooc 进击Node.js基础（二） npm 官方网站: npm 官网 npm 中文网 npm 文档 相关网站: NodeJS 菜鸟教程 cnpm cnpm简介 cnpm是npm的一个国内镜像,在中国境内进行开发时,使用cnpm来代替npm,可以大大提高包管理速度. 官方网站: cnpm 官网 cnpm使用说明 使用 cnpm (gzip 压缩支持) 命令行工具代替默认的 npm: $ npm install -g cnpm --registry=https://registry.npm.taobao.org 直接通过添加 npm 参数 alias 一个新命令: $ alias cnpm=\"npm --registry=https://registry.npm.taobao.org --cache=$HOME/.npm/.cache/cnpm --disturl=https://npm.taobao.org/dist --userconfig=$HOME/.cnpmrc\" # Or alias it in .bashrc or .zshrc $ echo ' #alias for cnpm alias cnpm=\\\"npm --registry=https://registry.npm.taobao.org \\ --cache=$HOME/.npm/.cache/cnpm \\ --disturl=https://npm.taobao.org/dist \\ --userconfig=$HOME/.cnpmrc\"' >> ~/.zshrc && source ~/.zshrc 建议使用第一种,简单,不容易出错. Copyright © LYF_Studio 2019 all right reserved，powered by GitbookLast Edit: 2019-04-08 09:59:13 "},"HTMLRecords/":{"url":"HTMLRecords/","title":"Part I: HTML Records","keywords":"","body":"Part I: HTML Records Copyright © LYF_Studio 2019 all right reserved，powered by GitbookLast Edit: 2019-04-03 17:00:16 "},"HTMLRecords/HTMLSetIcon.html":{"url":"HTMLRecords/HTMLSetIcon.html","title":"HTML 为网页添加图标","keywords":"","body":"HTML 为网页添加图标 为网页添加图标 ... Copyright © LYF_Studio 2019 all right reserved，powered by GitbookLast Edit: 2019-04-03 17:01:37 "},"CSSRecords/":{"url":"CSSRecords/","title":"Part II: CSS Records","keywords":"","body":"Part II: CSS Records Copyright © LYF_Studio 2019 all right reserved，powered by GitbookLast Edit: 2019-04-03 17:00:16 "},"CSSRecords/CSSHideScrollBar.html":{"url":"CSSRecords/CSSHideScrollBar.html","title":"CSS 隐藏滚动条","keywords":"","body":"CSS 隐藏滚动条 隐藏滚动条 查看 CSS 元素超出部分滚动, 并隐藏滚动条 设置样式： #box { width: 500px; height: 300px; overflow-x: hidden; overflow-y: scroll; line-height: 30px; text-align: center; } #box::-webkit-scrollbar { display: none; } Copyright © LYF_Studio 2019 all right reserved，powered by GitbookLast Edit: 2019-04-03 17:01:24 "},"JSRecords/":{"url":"JSRecords/","title":"Part III: JS Records","keywords":"","body":"Part III: JS Records Copyright © LYF_Studio 2019 all right reserved，powered by GitbookLast Edit: 2019-04-03 17:00:16 "},"JSRecords/JSDebugUEditorMultipleUpload.html":{"url":"JSRecords/JSDebugUEditorMultipleUpload.html","title":"JS DEBUG UEditor多图上传报错","keywords":"","body":"JS DEBUG UEditor多图上传报错 多图上传报错 查看 ueditor报错because its MIME type ('text/html') is not a supported stylesheet MIME type, and strict MIM 原文如下: 点击图片工具的时候报错如下: 点开发现是一个image.html的页面但是具体也没有哪里的报错。 因此我全局搜索了dialogbase.css这个内容。发现 我想可能是下面的rel的问题，把他隐藏 然后好啦。 Copyright © LYF_Studio 2019 all right reserved，powered by GitbookLast Edit: 2019-04-03 17:07:28 "},"VueRecords/":{"url":"VueRecords/","title":"Part IV: Vue Records","keywords":"","body":"Records Copyright © LYF_Studio 2019 all right reserved，powered by GitbookLast Edit: 2019-04-03 13:59:11 "},"VueRecords/VueGenerateTemplate.html":{"url":"VueRecords/VueGenerateTemplate.html","title":"Vue 生成初始模板","keywords":"","body":"Vue 生成初始模板 创建一个Vue项目 创建的样例可以参考之前已经做过的项目: Github liyf7218/pro-vue, 这是最初进行测试的项目,已经停更,仅供参考. Github whutAutoSquad/FE_ProgressiveProject, 这个项目中是在前一个项目的基础上搭建继续开发的,添加了更多的插件,也提供参考. 如果开发,建议直接跳转到 \"使用vue/cli-init搭建\". 基础知识 安装Node.js,请查看 nodejs 官网,建议将npm源替换为国内源,如 淘宝NPM镜像 cnpm 熟悉vue的概念和相关组件,请查看 Vue 官网 遵循官网的建议,使用官方创建工具 vue-cli 进行项目搭建.在这里进行简单的讲解,更多详情可访问 vue-cli 官网 开始搭建 安装 vue-cli: $ npm install -g @vue/cli $ vue --version 3.4.0 生成项目: $ vue create vue_workspace ? Please pick a preset: (Use arrow keys) ? Please pick a preset: default (babel, eslint) ? Pick the package manager to use when installing dependencies: (Use arrow keys) ? Pick the package manager to use when installing dependencies: Yarn - Creating project in D:\\workspace\\liyf_studio\\vue_workspace. ✨ Creating project in D:\\workspace\\liyf_studio\\vue_workspace. ⚙ Installing CLI plugins. This might take a while... ---- yarn install v1.13.0 info No lockfile found. [1/4] Resolving packages... [2/4] Fetching packages... info fsevents@1.2.7: The platform \"win32\" is incompatible with this module. info \"fsevents@1.2.7\" is an optional dependency and failed compatibility check. Excluding it from installation. [3/4] Linking dependencies... [4/4] Building fresh packages... success Saved lockfile. Done in 76.45s. Invoking generators... Installing additional dependencies... ---- yarn install v1.13.0 [1/4] Resolving packages... [2/4] Fetching packages... info fsevents@1.2.7: The platform \"win32\" is incompatible with this module. info \"fsevents@1.2.7\" is an optional dependency and failed compatibility check. Excluding it from installation. [3/4] Linking dependencies... [4/4] Building fresh packages... success Saved lockfile. Done in 19.12s. - Running completion hooks... ⚓ Running completion hooks... ---- - Generating README.md... Generating README.md... ---- Successfully created project vue_workspace. Get started with the following commands: ---- $ cd vue_workspace $ yarn serve 此处可能会用到yarn,安装命令如下: $ cnpm i -g yarn 运行项目 先查看package.json中的命令项,可以看到有: ... \"scripts\": { \"serve\": \"vue-cli-service serve\", \"build\": \"vue-cli-service build\", \"lint\": \"vue-cli-service lint\" }, ... 执行命令: $ npm run serve vue_workspace@0.1.0 serve D:\\workspace\\liyf_studio\\vue_workspace vue-cli-service serve INFO Starting development server... 98% after emitting CopyPlugin DONE Compiled successfully in 4091ms14:18:03 App running at: Local: http://localhost:8080/ Network: http://10.0.56.88:8080/ Note that the development build is not optimized. To create a production build, run yarn build. 然后打开浏览器,打开 http://localhost:8080/ ,即可进入vue demo页面: 至此,一个vue demo搭建完成. 查看package.json $ cat package.json { \"name\": \"vue_workspace\", \"version\": \"0.1.0\", \"private\": true, \"scripts\": { \"serve\": \"vue-cli-service serve\", \"build\": \"vue-cli-service build\", \"lint\": \"vue-cli-service lint\" }, \"dependencies\": { \"vue\": \"^2.5.22\" }, \"devDependencies\": { \"@vue/cli-plugin-babel\": \"^3.4.0\", \"@vue/cli-plugin-eslint\": \"^3.4.0\", \"@vue/cli-service\": \"^3.4.0\", \"babel-eslint\": \"^10.0.1\", \"eslint\": \"^5.8.0\", \"eslint-plugin-vue\": \"^5.0.0\", \"vue-template-compiler\": \"^2.5.21\" }, \"eslintConfig\": { \"root\": true, \"env\": { \"node\": true }, \"extends\": [ \"plugin:vue/essential\", \"eslint:recommended\" ], \"rules\": {}, \"parserOptions\": { \"parser\": \"babel-eslint\" } }, \"postcss\": { \"plugins\": { \"autoprefixer\": {} } }, \"browserslist\": [ \"> 1%\", \"last 2 versions\", \"not ie 可见这样创建的demo,没有引入常用的工具,知识单纯的创建了一个vue页面,如果需要更加丰富的功能,进行下一步. 使用vue/cli-init搭建 执行命令: $ vue init webpack vue_webpack_workspace Command vue init requires a global addon to be installed. Please run yarn global add @vue/cli-init and try again. 根据提示引入 vue/cli-init. $ yarn global add @vue/cli-init yarn global v1.13.0 [1/4] Resolving packages... warning @vue/cli-init > vue-cli > coffee-script@1.12.7: CoffeeScript on NPM has moved to \"coffeescript\" (no hyphen) warning @vue/cli-init > vue-cli > metalsmith > gray-matter > coffee-script@1.12.7: CoffeeScript on NPM has moved to \"coffeescript\" (no hyphen) [2/4] Fetching packages... [3/4] Linking dependencies... [4/4] Building fresh packages... warning \"@vue/cli-init@3.4.0\" has no binaries Done in 42.36s. 再执行命令: $ vue init webpack vue_webpack_workspace Command vue init requires a global addon to be installed. Please run yarn global add @vue/cli-init and try again. 发现还是报一样的错误. 所以查看一下官网,根据官网的步骤进行安装,如下: $ cnpm i -g @vue/cli-init Downloading @vue/cli-init to C:\\Users\\李叶飞\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli-init_tmp [npminstall:get] retry GET https://registry.npm.taobao.org/@vue%2Fcli-init after 100ms, retry left 4, error: ResponseTimeoutError: Response timeout for 60000ms, GET https://registry.npm.taobao.org/@vue%2Fcli-init -1 (connected: true, keepalive socket:false, agent status: {\"createSocketCount\":2,\"createSocketErrorCount\":0,\"closeSocketCount\":2,\"errorSocketCount\":0,\"timeoutSocketCount\":0,\"requestCount\":2,\"freeSockets\":{},\"sockets\":{},\"requests\":{}}, socketHandledRequests: 1, socketHandledResponses: 0) headers: {}, status: -1, headers: {}, stack: ResponseTimeoutError: Response timeout for 60000ms, GET https://registry.npm.taobao.org/@vue%2Fcli-init -1 (connected: true, keepalive socket: false, agent status: {\"createSocketCount\":2,\"createSocketErrorCount\":0,\"closeSocketCount\":2,\"errorSocketCount\":0,\"timeoutSocketCount\":0,\"requestCount\":2,\"freeSockets\":{},\"sockets\":{},\"requests\":{}}, socketHandledRequests: 1, socketHandledResponses: 0) headers: {} at Timeout._onTimeout (C:\\Users\\李叶飞\\AppData\\Roaming\\npm\\node_modules\\cnpm\\node_modules\\urllib\\lib\\urllib.js:835:15) at ontimeout (timers.js:425:11) at tryOnTimeout (timers.js:289:5) at listOnTimeout (timers.js:252:5) at Timer.processTimers (timers.js:212:10) Copying C:\\Users\\李叶飞\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli-init_tmp\\_@vue_cli-init@3.4.0@@vue\\cli-init to C:\\Users\\李叶飞\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli-init Installing @vue/cli-init's dependencies to C:\\Users\\李叶飞\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli-init/node_modules [1/2] execa@^1.0.0 installed at node_modules\\_execa@1.0.0@execa [2/2] vue-cli@^2.9.2 installed at node_modules\\_vue-cli@2.9.6@vue-cli deprecate vue-cli@2.9.6 › metalsmith@2.3.0 › gray-matter@2.1.1 › coffee-script@^1.12.4 CoffeeScript on NPM has moved to \"coffeescript\" (no hyphen) Recently updated (since 2019-02-07): 4 packages (detail see file C:\\Users\\李叶飞\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli-init\\node_modules\\.recently_updates.txt) 2019-02-13 → vue-cli@2.9.6 › async@^2.4.0(2.6.2) (06:36:10) 2019-02-10 → vue-cli@2.9.6 › request@2.88.0 › har-validator@5.1.3 › ajv@^6.5.5(6.9.1) (16:42:28) 2019-02-08 → vue-cli@2.9.6 › download-git-repo@1.1.0 › download@5.0.3 › decompress@4.2.0 ›decompress-tarbz2@4.1.1 › unbzip2-stream@^1.0.9(1.3.3) (23:11:06) 2019-02-07 → vue-cli@2.9.6 › handlebars@^4.0.5(4.1.0) (17:48:59) All packages installed (252 packages installed from npm registry, used 13s(network 13s), speed 403.16kB/s, json 235(411.33kB), tarball 4.76MB) 安装完成,接下来进行项目创建: $ vue init webpack vue_webpack_workspace ? Project name (vue_webpack_workspace) ? Project name vue_webpack_workspace ? Project description (A Vue.js project) ? Project description A Vue.js project ? Author (liyf7218 ) ? Author liyf7218 ? Vue build runtime ? Install vue-router? (Y/n) Y ? Install vue-router? Yes ? Use ESLint to lint your code? (Y/n) n ? Use ESLint to lint your code? No ? Set up unit tests (Y/n) Y ? Set up unit tests Yes ? Pick a test runner (Use arrow keys) ? Pick a test runner jest ? Setup e2e tests with Nightwatch? (Y/n) ? Setup e2e tests with Nightwatch? Yes ? Should we run `npm install` for you after the project has been created? (recom ? Should we run `npm install` for you after the project has been created? (recom mended) npm vue-cli · Generated \"vue_webpack_workspace\". # Installing project dependencies ... # ======================== npm WARN deprecated browserslist@2.11.3: Browserslist 2 could fail on reading Browserslist >3.0 config used in other tools. npm WARN deprecated bfj-node4@5.3.1: Switch to the `bfj` package for fixes and new features! npm WARN deprecated browserslist@1.7.7: Browserslist 2 could fail on reading Browserslist >3.0 config used in other tools. npm WARN deprecated socks@1.1.10: If using 2.x branch, please upgrade to at least 2.1.6 to avoid a serious bug with socket data flow and an import issue introduced in 2.1.0 > chromedriver@2.46.0 install D:\\workspace\\liyf_studio\\vue_webpack_workspace\\node_modules\\chromedriver > node install.js Current existing ChromeDriver binary is unavailable, proceding with download and extraction. Downloading from file: https://chromedriver.storage.googleapis.com/2.46/chromedriver_win32.zip Saving to file: C:\\Users\\李叶飞\\AppData\\Local\\Temp\\2.46\\chromedriver\\chromedriver_win32.zip Received 781K... Received 1578K... Received 2362K... Received 3146K... Received 3930K... Received 4523K total. Extracting zip contents Copying to target path D:\\workspace\\liyf_studio\\vue_webpack_workspace\\node_modules\\chromedriver\\lib\\chromedriver Done. ChromeDriver binary available at D:\\workspace\\liyf_studio\\vue_webpack_workspace\\node_modules\\chromedriver\\lib\\chromedriver\\chromedriver.exe > uglifyjs-webpack-plugin@0.4.6 postinstall D:\\workspace\\liyf_studio\\vue_webpack_workspace\\node_modules\\webpack\\node_modules\\uglifyjs-webpack-plugin > node lib/post_install.js npm notice created a lockfile as package-lock.json. You should commit this file. npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.7 (node_modules\\fsevents): npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.7: wanted {\"os\":\"darwin\",\"arch\":\"any\"} (current: {\"os\":\"win32\",\"arch\":\"x64\"}) added 1491 packages from 1076 contributors and audited 30412 packages in 154.382s found 8 vulnerabilities (1 low, 1 moderate, 5 high, 1 critical) run `npm audit fix` to fix them, or `npm audit` for details # Project initialization finished! # ======================== To get started: cd vue_webpack_workspace npm run dev Documentation can be found at https://vuejs-templates.github.io/webpack 此时创建完成,运行项目 $ npm start > vue_webpack_workspace@1.0.0 start D:\\workspace\\liyf_studio\\vue_webpack_workspace > npm run dev > vue_webpack_workspace@1.0.0 dev D:\\workspace\\liyf_studio\\vue_webpack_workspace > webpack-dev-server --inline --progress --config build/webpack.dev.conf.js ... I Your application is running here: http://localhost:8080 用浏览器打开 localhost:8080,可见: 查看package.json $ cat package.json { \"name\": \"vue_webpack_workspace\", \"version\": \"1.0.0\", \"description\": \"A Vue.js project\", \"author\": \"liyf7218 \", \"private\": true, \"scripts\": { \"dev\": \"webpack-dev-server --inline --progress --config build/webpack.dev.conf.js\", \"start\": \"npm run dev\", \"unit\": \"jest --config test/unit/jest.conf.js --coverage\", \"e2e\": \"node test/e2e/runner.js\", \"test\": \"npm run unit && npm run e2e\", \"build\": \"node build/build.js\" }, \"dependencies\": { \"vue\": \"^2.5.2\", \"vue-router\": \"^3.0.1\" }, \"devDependencies\": { \"autoprefixer\": \"^7.1.2\", \"babel-core\": \"^6.22.1\", \"babel-helper-vue-jsx-merge-props\": \"^2.0.3\", \"babel-jest\": \"^21.0.2\", \"babel-loader\": \"^7.1.1\", \"babel-plugin-dynamic-import-node\": \"^1.2.0\", \"babel-plugin-syntax-jsx\": \"^6.18.0\", \"babel-plugin-transform-es2015-modules-commonjs\": \"^6.26.0\", \"babel-plugin-transform-runtime\": \"^6.22.0\", \"babel-plugin-transform-vue-jsx\": \"^3.5.0\", \"babel-preset-env\": \"^1.3.2\", \"babel-preset-stage-2\": \"^6.22.0\", \"babel-register\": \"^6.22.0\", \"chalk\": \"^2.0.1\", \"chromedriver\": \"^2.27.2\", \"copy-webpack-plugin\": \"^4.0.1\", \"cross-spawn\": \"^5.0.1\", \"css-loader\": \"^0.28.0\", \"extract-text-webpack-plugin\": \"^3.0.0\", \"file-loader\": \"^1.1.4\", \"friendly-errors-webpack-plugin\": \"^1.6.1\", \"html-webpack-plugin\": \"^2.30.1\", \"jest\": \"^22.0.4\", \"jest-serializer-vue\": \"^0.3.0\", \"nightwatch\": \"^0.9.12\", \"node-notifier\": \"^5.1.2\", \"optimize-css-assets-webpack-plugin\": \"^3.2.0\", \"ora\": \"^1.2.0\", \"portfinder\": \"^1.0.13\", \"postcss-import\": \"^11.0.0\", \"postcss-loader\": \"^2.0.8\", \"postcss-url\": \"^7.2.1\", \"rimraf\": \"^2.6.0\", \"selenium-server\": \"^3.0.1\", \"semver\": \"^5.3.0\", \"shelljs\": \"^0.7.6\", \"uglifyjs-webpack-plugin\": \"^1.1.1\", \"url-loader\": \"^0.5.8\", \"vue-jest\": \"^1.0.2\", \"vue-loader\": \"^13.3.0\", \"vue-style-loader\": \"^3.0.1\", \"vue-template-compiler\": \"^2.5.2\", \"webpack\": \"^3.6.0\", \"webpack-bundle-analyzer\": \"^2.9.0\", \"webpack-dev-server\": \"^2.9.1\", \"webpack-merge\": \"^4.1.0\" }, \"engines\": { \"node\": \">= 6.0.0\", \"npm\": \">= 3.0.0\" }, \"browserslist\": [ \"> 1%\", \"last 2 versions\", \"not ie 可见已经添加了多种脚手架工具,我们使用这个作为开发的基础,进行进一步的开发. Copyright © LYF_Studio 2019 all right reserved，powered by GitbookLast Edit: 2019-04-03 12:15:08 "},"VueRecords/VueContent.html":{"url":"VueRecords/VueContent.html","title":"Vue 目录结构","keywords":"","body":"Vue 目录结构 vue 项目文档结构 此处说明一下目录结构,截图如下: build 此目录用于存放 编译 和 打包 项目文件的配置,主要使用的工具就是 webpack. config 此目录用于配置项目整体环境. dist 此目录用于存放编译后的项目文件. 在部署时,执行命令: $ npm run build 会生成此目录,将其中的文件全部拷贝到服务器页面目录,即可完成部署. node_modules 项目依赖包存放目录. src 源码存放目录,这里是主要的工作空间. assets 要用到的各种资源. 比如,使用 @vue/cli-init 创建项目时,此处存放 vue 的 logo. 但是现在建议将需要用到的其他资源文件统一放到 static 文件夹下,进行统一管理. components 可复用组件 的存放目录. 可以将项目中常用到的vue组件,或在多个文件中都可能用到的vue组件,存放在此目录下. containers 容器组件 的存放目录. 容器组件通常指具有特定的页面布局,很少会被复用的组件. 比如,登陆页面, 主页面的各个区域(顶部栏,侧边栏,底部栏 ...), 等 router 路由管理目录 将所有的 vue-router 路由管理功能统一集中到此目录下. store 状态管目录 将所有存放在 vuex 中的状态管理功能统一集中到此目录下. 建议: store中不必存放所有的状态,其实将各个页面会复用的状态存放在store中即可. 如果一个数值只在其当前页面中被调用,那么这个值/状态根本不必存放在store中. utils 工具函数存放目录 将项目中可能会用到的工具函数存放在此目录下. views 页面文件存放目录 将项目中的子页面统一存放在此处.子页面是指除去顶部栏,侧边栏等全局组件后,进行详细业务处理的页面文件. 这个目录是操作最频繁的,因为几乎所有的业务场景的处理文件都要存放在此文件夹下. APP.vue vue项目的总桥接文件 将此vue项目和实际的html文档连接在一块 main.js vue的总配置文件 将此vue项目的所有全局vue配置进行统一管理,包括 Vue配置 Vue默认配置 全局方法的绑定 Vue-Router配置的引入 Vuex配置的引入 全局组件库的引入 static 静态文件的存储目录 将项目中所有需要用到的静态文件存放在此处,包括 图片文件 外部组件包的源码文件 全局样式文件 全局字体(含图标库)文件 test 测试文件的存放目录 目前支持两种测试方式,单元测试(unit testing)和端到端测试(e2e testing) 单元测试(unit testing) 站在程序员的角度测试 unit测试是把代码看成是一个个的组件。从而实现每一个组件的单独测试，测试内容主要是组件内每一个函数的返回结果是不是和期望值一样。 端到端测试(e2e testing) 站在用户角度的测试 e2e测试是把我们的程序堪称是一个黑盒子，我不懂你内部是怎么实现的，我只负责打开浏览器，把测试内容在页面上输入一遍，看是不是我想要得到的结果。 .babelrc babel配置文件 此文件用于将新语法代码转换为原生JS 详见 Babel 官网 .editorconfig 控制编辑格式 详见 EditorConfig 官网 .gitignore git忽略管理 工具网站 Gitignore.io .postcssrc.js 参见 postcss-load-config index.html 项目承载文件 package.json Node配置文件 README.md 项目说明文件 Copyright © LYF_Studio 2019 all right reserved，powered by GitbookLast Edit: 2019-04-03 11:25:13 "},"VueRecords/VueStartupProcess.html":{"url":"VueRecords/VueStartupProcess.html","title":"Vue 项目启动过程分析","keywords":"","body":"Vue 项目启动过程分析 将项目从开始启动,到生成可运行代码的过程记录在此. npm start 首先,需要了解一下 npm 命令,请查看 NPM 官网 在开发版本中,使用 npm start 命令运行此项目. 在 package.json 文件中定义的 \"scripts\" 对象中查找 \"start\" 属性， 如果此属性定义了任何命令则执行之。 如果 \"scripts\" 对象中没有定义 \"start\" 属性， 默认执行 node server.js 命令。 找到对应的命令: \"scripts\": { \"dev\": \"webpack-dev-server --inline --progress --config build/webpack.dev.conf.js\", \"start\": \"npm run dev\", \"unit\": \"jest --config test/unit/jest.conf.js --coverage\", \"e2e\": \"node test/e2e/runner.js\", \"test\": \"npm run unit && npm run e2e\", \"build\": \"node build/build.js\" }, 即执行了 npm run dev 命令,其中 npm run 是 npm run-script 的别名,故实际执行了 npm run-script dev. 这会执行 package.json 中定义的 scripts.dev 指定的命令,故最终执行的命令为 $ webpack-dev-server --inline --progress --config build/webpack.dev.conf.js 接下来就转到了 webpack 的配置上. webpack 首先,需要了解一下 webpack,这是一个现在最流行的代码打包工具,可进入 webpack 中文网 学习使用. 然后,仔细阅读 webpack-dev-server 的使用 简而言之, webpack-dev-server 提供了一个 基于webpack的可以热加载的WEB服务器. 配置文件 找到配置文件 build/webpack.dev.conf.js, 可以逐行阅读,这个文件一共也不到100行. 先看导出: module.exports = new Promise((resolve, reject) => { portfinder.basePort = process.env.PORT || config.dev.port portfinder.getPort((err, port) => { .... resolve(devWebpackConfig) } }) }) 发现返回了一个变量 devWebpackConfig, 找到定义: const config = require('../config') const merge = require('webpack-merge') const baseWebpackConfig = require('./webpack.base.conf') const HtmlWebpackPlugin = require('html-webpack-plugin') .... const devWebpackConfig = merge(baseWebpackConfig, { .... // these devServer options should be customized in /config/index.js devServer: { .... host: HOST || config.dev.host, port: PORT || config.dev.port, .... }, plugins: [ .... // https://github.com/ampedandwired/html-webpack-plugin new HtmlWebpackPlugin({ filename: 'index.html', template: 'index.html', inject: true }), .... ] }) 由此可见 devWebpackConfig 是在 ./webpack.base.conf 的基础上,通过 webpack-merge 工具进行进一步合并的. 根据 devServer.host 和 devServer.port 可以找到使用 webpack-dev-server 启动的服务器或在哪里启动. 查看 root/config/index.js ,找到配置 module.exports = { dev: { .... host: 'localhost', // can be overwritten by process.env.HOST port: 8080, // can be overwritten by process.env.PORT, if port is in use, a free one will be determined .... }, .... } 这样我们可以得出启动的WEB服务会在 localhost:8080 启动,这也是之后使用浏览器访问的地址. 同时我们发现使用了插件 HtmlWebpackPlugin 阅读对应文档可知,这个插件规定了这个项目要使用的html模板: root/index.html ,当webpack将项目文件打包完以后,会以 标签 的形式插入到html文件中 查看 webpack.base.conf, 可以看到 const config = require('../config') .... module.exports = { context: path.resolve(__dirname, '../'), entry: { app: './src/main.js' }, output: { path: config.build.assetsRoot, filename: '[name].js', publicPath: process.env.NODE_ENV === 'production' ? config.build.assetsPublicPath : config.dev.assetsPublicPath }, .... } 项目入口为 root/src/main.js, 出口为 require('../config').build.assetsRoot, 可以浏览此文件得出,项目出口为 root/dist. webpack配置总结 由上述配置可见,此项目使用webapck进行项目打包和构建. 以 root/index.html 为模板, 以 root/src/main.js 为打包入口, 以 root/dist/ 为打包出口. WEB服务启动位置为 localhost:8080 . 但是在使用 webpack-dev-server 进行本地项目启动时,所有的打包好的文件均保存在内存中,没有生成实际的磁盘文件,故打包结果以 浏览器可访问 为准. Copyright © LYF_Studio 2019 all right reserved，powered by GitbookLast Edit: 2019-04-03 11:25:58 "},"VueRecords/VueBuildupProcess.html":{"url":"VueRecords/VueBuildupProcess.html","title":"Vue 项目执行流程分析","keywords":"","body":"Vue 项目执行流程分析 此处记录vue文件从最顶端开始的组建调用过程. 入口文件 由 项目执行流程分析(启动过程) 得知,入口文件为 root/src/main.js 查看此文件,分析其实现了哪些功能. import Vue from 'vue' import App from './App' import router from './router' Vue.config.productionTip = false /* eslint-disable no-new */ new Vue({ el: '#app', router, render: h => h(App) }) 挂载 首先,也是最重要的,就是挂载. 查看 Vue 选项/DOM el 创建了一个新的Vue实例,将其挂载到了 id 为 app 的节点上,考虑到 webpack 打包完成后会将vue项目以 标签 的形式插入到指定的html中,此挂载功能是最为紧要的,由此建立起了整个vue项目与实际html文件的连接. 提供一个在页面上已存在的 DOM 元素作为 Vue 实例的挂载目标。可以是 CSS 选择器，也可以是一个 HTMLElement 实例。 在实例挂载之后，元素可以用 vm.$el 访问。 如果在实例化时存在这个选项，实例将立即进入编译过程，否则，需要显式调用 vm.$mount() 手动开启编译。 如果在html模板文件中没有声明 id 为 app 的节点,那么整个项目也并不会有任何的报错,但是页面会是html模板原有的模样,即一片空白 注意! 提供的元素只能作为挂载点。不同于 Vue 1.x，所有的挂载元素会被 Vue 生成的 DOM 替换。因此不推荐挂载 root 实例到 html 或者 body 上。 渲染 查看 Vue 选项/DOM render 字符串模板的代替方案，允许你发挥 JavaScript 最大的编程能力。该渲染函数接收一个 createElement 方法作为第一个参数用来创建 VNode render的类型为 (createElement: () => VNode) => VNode,在应用时可用匿名函数展示 render: createElement => createElement() Vue 选项中的 render 函数若存在，则 Vue 构造函数不会从 template 选项或通过 el 选项指定的挂载元素中提取出的 HTML 模板编译渲染函数 绑定路由 查看 Vue-Router Getting Started 路由会作为插件引入到Vue项目中,引入插件需要以下几步: // 0. If using a module system (e.g. via vue-cli), import Vue and VueRouter // and then call `Vue.use(VueRouter)`. // 1. Define route components. // These can be imported from other files const Foo = { template: 'foo' } const Bar = { template: 'bar' } // 2. Define some routes // Each route should map to a component. The \"component\" can // either be an actual component constructor created via // `Vue.extend()`, or just a component options object. // We'll talk about nested routes later. const routes = [ { path: '/foo', component: Foo }, { path: '/bar', component: Bar } ] // 3. Create the router instance and pass the `routes` option // You can pass in additional options here, but let's // keep it simple for now. const router = new VueRouter({ routes // short for `routes: routes` }) // 4. Create and mount the root instance. // Make sure to inject the router with the router option to make the // whole app router-aware. const app = new Vue({ router }).$mount('#app') // Now the app has started! 绑定插件时,使用了 Vue.use(Plugin) 方法,来声明要使用此插件,但是有一个疑惑: 在router/index.js中使用了 Vue.use(vue-router) , 这个Vue 是此文件使用 import('vue')来引入的,是一次独立的引用,然后抛出了一个新的Router实例. main.js引入此实例后可以直接使用 直观的看来,这两个文件分别引入了Vue包,但是功能可以连贯的实现,百思不得其解,有必要查看一下源码. 在vue源码文件夹中查找 [ 'vue.use:' , 'vue.use=' , 'vue.use =' ,...]可以找到源码文件( node_modules\\vue\\src\\core\\global-api\\use.js ) /* @flow */ import { toArray } from '../util/index' export function initUse (Vue: GlobalAPI) { Vue.use = function (plugin: Function | Object) { const installedPlugins = (this._installedPlugins || (this._installedPlugins = [])) if (installedPlugins.indexOf(plugin) > -1) { return this } // additional parameters const args = toArray(arguments, 1) args.unshift(this) if (typeof plugin.install === 'function') { plugin.install.apply(plugin, args) } else if (typeof plugin === 'function') { plugin.apply(null, args) } installedPlugins.push(plugin) return this } } 可以看到这个函数的功能是 touch 一下传入的插件,有就返回,没有就标识一下,没有其他多余的功能. 所以Vue.use(Plugin)只是单纯的判断要插入的插件是否已经存在了,避免重复插入. Copyright © LYF_Studio 2019 all right reserved，powered by GitbookLast Edit: 2019-04-03 12:17:48 "},"VueRecords/VueImportVueRouter.html":{"url":"VueRecords/VueImportVueRouter.html","title":"Vue 使用 vue-router","keywords":"","body":"Vue 使用 vue-router 引用路由 详细理解路由的过程,可以先查看 vue-router 中文官网 一般来说,引入路由一般需要四步: 引入 vue 和 vue-router 声明我们这个项目这就要使用路由,使用 Vue.use(Router) 创建独立的路由实例,进行适当的配置,使用 new Router(config), 查看 /src/router/index.js: import Vue from 'vue' import Router from 'vue-router' import { routes } from './routes' Vue.use(Router) export default new Router({ routes }) 至此,路由仍没有绑定到任何的 Vue 实例中,所以需要引入创建好的路由然后绑定一下,使用 new Vue({router, ....}), 查看 /src/main.js: import Vue from 'vue' import router from './router' .... new Vue({ router, .... }) 路由的配置 路由的配置相当于组织整体项目和页面的总规划,不可避免的要使用到以下功能: 路径导航 嵌套路由 路由懒加载 ... 从最基本的路由配置入手,先定义一个最简单的路由,当页面只想 /demo 时,在 main-body 处显示组件 /src/views/demo/index.vue 编辑 vue-router 的配置文件 /src/router/routes.js : import IContainer from '@/containers' // 导出路由 export const routes = [ { path: '/', name: 'IContainer', component: IContainer, redirect: '/demo', children: [ { path: '/demo', name: 'Demo', component: resolve => require(['@/views/demo'], resolve) } ] } ] vue-router 最基本的路由配置为: { path: '/xxx', name: 'xxx', component: VueComponent } 这样就能简单的使用路由了. 进一步使用 嵌套路由 的话,需要配置 children 属性,当启用此属性时,还需要在父组件内部配合添加路由组件,查看 src/containers/index.vue: .... 当路由导航到指定的子组件时,会先渲染父组件,然后将子组件添加到 所处的位置,即 进行替换. 当有了嵌套路由 时,必然也要有导向内部组件的 重定向功能,那么就需要使用 redirect 属性, 于是可以得到 routes.js 文件中的大部分配置. 然后是懒加载,可以查看 vue-router 懒加载功能 为什么需要懒加载？ 像vue这种单页面应用，如果没有应用懒加载，运用webpack打包后的文件将会异常的大，造成进入首页时，需要加载的内容过多，时间过长，会出啊先长时间的白屏，即使做了loading也是不利于用户体验，而运用懒加载则可以将页面进行划分，需要的时候加载页面，可以有效的分担首页所承担的加载压力，减少首页加载用时 简单的说就是：进入首页不用一次加载过多资源造成用时过长！！！ 先看一下 CSDN博客 vue路由懒加载, 这里有讲vue路由懒加载的原理和过程. 在这里也要抛出一个疑问 ,为什么会是如下的写法: component: resolve => require(['@/views/demo'], resolve) 反正是能用,很难受,抽时间读一读源码. 独立页面的配置 ErrorPage 路由的配置是从上到下依次检测的,所以可以将ErrorPage页面放到路由最底部. 打开 /src/router/routes.js import ErrorPage from '@/components/404' .... export const routes = { .... ,{ path: '*', name: 'ErrorPage', component: ErrorPage } } 使用通配符,当前面的路由都不匹配时,会调整到ErrorPage. Copyright © LYF_Studio 2019 all right reserved，powered by GitbookLast Edit: 2019-04-03 11:26:52 "},"VueRecords/VueImportECharts.html":{"url":"VueRecords/VueImportECharts.html","title":"Vue 使用 ECharts","keywords":"","body":"Vue 使用 ECharts 相关网站 ECharts 官网 ECharts 配置项手册 其他: CNBlogs 在vue-cli项目中使用echarts 安装echarts依赖 使用npm引入 $ npm install --save echarts 全局引入 设置全局插件,将echarts绑定到vue实例上 import echarts from 'echarts' ... export default { install(Vue, options) { ... Vue.prototype._echarts = echarts; //echarts 全局方法,这里使用下划线用来标注 } } 创建echarts实例 ... ... export default { data(){ return {} }, methods: { initEcharts() { // 初始化 echarts 实例 let mainChart = this._echarts.init(document.getElementById('main-echarts')); this.drawChart(mainChart); }, drawChart(chart) { // clear() 清空当前实例，会移除实例中所有的组件和图表。清空后调用 getOption 方法返回一个{}空对象。 chart.clear(); let lineChartOption = { title: { text: '强调趋势,使用折线图' }, legend: { left: 'center', data: ['哈哈', '嘿嘿'] }, xAxis: { data: [\"Item1\", \"Item2\", \"Item3\", \"Item4\", \"Item5\", \"Item6\"] }, yAxis: {}, series: [{ name: '哈哈', type: 'line', data: this.getRandomNumberArrays({ length: 6 }), }, { name: '嘿嘿', type: 'line', data: this.getRandomNumberArrays({ length: 6 }), }] }; chart.setOption(lineChartOption); }, }, created() { // 不要在这里进行任何的图表绘制,不好使,即使在 mounted 时存到了 data 当中,这里也取不到对应实例. // !!this.drawChart(this.mainChart); }, mounted() { // 注意： 这里echarts初始化应在钩子函数mounted()中，这个钩子函数是在el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用 // 所有的初始化工作,都在这里完成,放在别的地方不好使的 this.initEcharts(); }, } Copyright © LYF_Studio 2019 all right reserved，powered by GitbookLast Edit: 2019-04-03 12:19:37 "},"VueRecords/VueImportElementUI.html":{"url":"VueRecords/VueImportElementUI.html","title":"Vue 使用 Element-UI","keywords":"","body":"Vue 使用 Element-UI 查看 Element-UI 官网 npm 安装 执行以下命令,将element包添加到本地. $ npm i element-ui -S 在项目中引入element-ui 此时我们采用完整引入,如需要部分引入请看 Element-UI 按需引入 在 main.js 中写入以下内容： .... import Vue from 'vue'; + import ElementUI from 'element-ui'; + import 'element-ui/lib/theme-chalk/index.css'; .... + Vue.use(ElementUI); .... new Vue({....}); 以上代码便完成了 Element 的引入。需要注意的是，样式文件需要单独引入。 修改模板文件 将element官方实例直接复制到此项目中,现将 HelloWorld.vue 重命名为 Container.vue, 并将其内容修改如下: Header Aside Main Footer export default { name: 'Container', data() { return { } } } .main-container { /* 将页面高度铺满 */ min-height: -webkit-fill-available; } .el-header, .el-footer { background-color: #B3C0D1; color: #333; text-align: center; line-height: 60px; } .el-aside { background-color: #D3DCE6; color: #333; text-align: center; line-height: 200px; } .el-main { background-color: #E9EEF3; color: #333; text-align: center; line-height: 160px; } body>.el-container { margin-bottom: 40px; } 可启动程序,查看效果: Copyright © LYF_Studio 2019 all right reserved，powered by GitbookLast Edit: 2019-04-03 11:28:35 "},"VueRecords/VueImportIconfont.html":{"url":"VueRecords/VueImportIconfont.html","title":"Vue 使用 Iconfont","keywords":"","body":"Vue 使用 Iconfont 相关网站 阿里图标库Iconfont 官网 阿里图标库Iconfont 帮助手册 - 代码应用 其他: CSDN Web端如何引用iconfont，iconfont所有的引用方式 使用 font-class 引入图标 找到要使用的图标库,将需要的图标加入到购物车中 打开购物车,选择将图标添加至项目 选择项目,或者新建项目 打开我的项目,选择 Font Class 选项卡,选择下载到本地 此时,会得到一个 download.zip 的压缩包文件,进行解压操作 打开解压后的文件夹,可以看到名为 font_projectcode_randomstr 的文件夹,切进去 其中,圈注出来的几个文件是必须的,其他文件是用来直接打开查看效果的demo样例 拷贝 圈注的文件(建议直接拷贝此文件夹下的所有文件) 到前端项目css样式目录下,并引入到项目中 使用图标, 只需为指定标签(\\, \\, etc)添加样式 class=\"icon iconfont iconName\" 即可 查看引入的结果 Copyright © LYF_Studio 2019 all right reserved，powered by GitbookLast Edit: 2019-04-03 12:20:37 "},"VueRecords/VueImportBMap.html":{"url":"VueRecords/VueImportBMap.html","title":"Vue 使用 BMap","keywords":"","body":"Vue 使用 BMap 相关网站 百度地图 官网 百度地图 JavaScript API v3.0 百度地图 申请百度账号和ak 按照指引使用百度地图 百度地图 HelloWorld Copyright © LYF_Studio 2019 all right reserved，powered by GitbookLast Edit: 2019-04-03 12:21:10 "},"VueRecords/VueBindVueRouterToMenu.html":{"url":"VueRecords/VueBindVueRouterToMenu.html","title":"Vue 将路由绑定到菜单","keywords":"","body":"Vue 将路由绑定到菜单 使用element-ui.menu的router属性 先查看 element-ui menu ,在配置中可以找到 router 属性: 添加router属性 根据提示可以知道,在点击菜单项时,会获取其 index 属性值,然后作为 vue-router 的导航来用,这样就简化了设置每次操作的跳转. 例如: .... .... 这样在点击 note 项的时候,会自动跳转到 host/#/note 页面. 将路由的具体配置引入到菜单中 {{route.name}} {{isCollapse?'':'Toggle Menu'}} + import { routes } from '@/router/routes'; export default { data() { return { // 获取到从根目录起始的所有子目录 + routes: routes.find(ele => ele.path == '/').children, } }, .... } 根据路径高亮对应菜单 做到以上,可以正常使用菜单的路由了,但是,有一个新的问题: 当我们在浏览器地址栏直接输入路径时,对应的菜单并没有高亮 还需要进一步设置 .... .... .... data() { .... activeMenuItem: '', }, watch:{ // 持续检测路由变化. '$route': function (currentRoute) { this.activeMenuItem = currentRoute.path; } }, ..... created(){ // 在第一次载入时,获取当前路由信息 this.activeMenuItem = this.$route.path; } .... 这样就可以根据当前路径高亮对应菜单了 Copyright © LYF_Studio 2019 all right reserved，powered by GitbookLast Edit: 2019-04-03 11:27:48 "},"VueRecords/VueExportExcelFromElTable.html":{"url":"VueRecords/VueExportExcelFromElTable.html","title":"Vue 从el-table导出excel","keywords":"","body":"Vue 从el-table导出excel 分为三步: 导入必要的npm包 file-saver xlsx 在表格标签中设置id 按照以下方法导出 (row.state == '0')\"> 初始 已提交 初审通过 复审通过 // 引入需要的npm包 import FileSaver from 'file-saver'; import XLSX from 'xlsx'; export default { methods: { // 导出数据 exportExcel() { /* generate workbook object from table */ let wb = XLSX.utils.table_to_book(document.querySelector('#logTable')) /* get binary string as output */ let wbout = XLSX.write(wb, { bookType: 'xlsx', bookSST: true, type: 'array' }) try { let newBlob = new Blob([wbout], { type: 'application/octet-stream' }) FileSaver.saveAs(newBlob, '导出名称.xlsx') } catch (e) { if (typeof console !== 'undefined') console.log(e, wbout) } return wbout }, }, created() { this.tableData = [{ ... }] } }; 注意,不要在要导出的表格中使用 fixed 属性,这样会导致导出的数据重复 Copyright © LYF_Studio 2019 all right reserved，powered by GitbookLast Edit: 2019-04-03 16:24:47 "},"VueRecords/VueUploadFile.html":{"url":"VueRecords/VueUploadFile.html","title":"Vue 上传文件","keywords":"","body":"Vue 上传文件 使用Element组件库 使用 element-ui upload组件,一行代码如下 Copyright © LYF_Studio 2019 all right reserved，powered by GitbookLast Edit: 2019-04-03 16:26:23 "},"VueRecords/VueDownloadFile.html":{"url":"VueRecords/VueDownloadFile.html","title":"Vue 下载文件","keywords":"","body":"Vue 下载文件 调用 window.open 先写个触发按钮: 导出 然后引用必要的npm包, 查看 qs, 设置一下链接地址以及参数信息 import qs from 'qs' import { setBaseUrl } from '@/config.js' ..... getExportLink (params = {}){ let link = setBaseUrl() +'/api/export'; // 设置全局参数 params.appId=process.env.appId; let url=link+'?'+qs.stringify(params); return url; } 导出函数如下 download(){ let _exportLink = getExportLink ({ // 设置独有参数 self_defined_params: xxx }) // 在新的网页打开导出链接即可实现下载 window.open( _exportLink, \"_blank\" ); } 使用 \\ 标签 获取下载链接,同上 import qs from 'qs' import { setBaseUrl } from '@/config.js' ..... getExportLink (params = {}){ let link = setBaseUrl() +'/api/export'; // 设置全局参数 params.appId=process.env.appId; let url=link+'?'+qs.stringify(params); return url; } 直接在 href 属性中设置下载链接 导出 即可. Copyright © LYF_Studio 2019 all right reserved，powered by GitbookLast Edit: 2019-04-03 16:25:40 "},"VueDesign/":{"url":"VueDesign/","title":"Part IV+: Vue Design","keywords":"","body":"Part V+: Vue Design 对要完成的业务逻辑和页面功能进行详细规划, 不能像之前一样做无头苍蝇!!!! 初步分析 对要做的项目进行概述和总纲设计,确定大致方向 详细设计 对项目的细节进行展开设计 总设计 统领细节设计,之后会分为 前端/后台/数据库 三部分进行详细设计 前端设计 根据总设计进行页面的编写 后台设计 根据总设计进行业务逻辑的处理 数据库设计 根据总设计进行数据库的梳理和创建 逻辑记录 把为什么做,为什么要这样做,和怎么做都进行记录 Copyright © LYF_Studio 2019 all right reserved，powered by GitbookLast Edit: 2019-04-04 10:07:54 "},"VueDesign/Start.html":{"url":"VueDesign/Start.html","title":"Vue Design 初步设计","keywords":"","body":"Vue Design 初步设计 总纲 想到的东西挺多,基本想把已经接触到的业务都做一遍,但是在这里立下规矩 思路串联 先设计,再开发,不能闷头就干,否则会有大量的返工 任务串联 要做一个模块,就一直把这个模块做完,在开始下一个 先总再分 把可能用到的相同的东西/技术放在项目最顶层,以便随时调用; 先把公共服务设计和公共服务模块进行搭建,以便复用. 总体布局 可能用到的布局: 顶部栏/Header 信息栏,一般包括以下信息 Logo 全局搜索/Searcher 通知/Notification 全局操作/GlobalAction 登陆信息及操作/LoginAction 侧边栏/Sidebar 导航栏,所有菜单都放在此处 底部栏/Footer 信息栏,一般包括以下内容 相关连接 以无框垂直列表的形式展示 版权说明 放在最底部 分模块设计 目前想要做的东西有 基础模块 日记 单纯的想做一个日记模块,将每天的所见所得随时记录下来 书籍 将喜欢的书记录下来,收藏起来 音乐 收藏喜欢的音乐 视频 将视频下载到本地,在网站中进行统一管理 定制模块 账单 记账用 轨迹 将自己每天的地理轨迹记录下来,使用可视化工具 族谱 将一个家族中的所有人员都记录下来,为每个成员提供以自己为中心的亲戚网络 Copyright © LYF_Studio 2019 all right reserved，powered by GitbookLast Edit: 2019-04-04 10:08:29 "},"VueDesign/Layout.html":{"url":"VueDesign/Layout.html","title":"Vue Design 布局","keywords":"","body":"Vue Design 布局 总体布局 此项目暂定为使用Element-UI进行布局,可参看 Element-UI 布局容器 顶部栏(24/24) 侧边栏(6/24) 主体空间(18/24) 底部栏(18/24) 布局图如下: 顶部栏设计 还是按照之前做过的样式,迁移过来,大致样子为: 左侧为Logo,使用文字即可 右侧为用户信息和统一功能菜单 将功能菜单统一放到左侧边栏 统一的功能菜单后续再加,先完成如下: 侧边栏设计 侧边栏设计为可以展开收缩的菜单列表,先查看 element-ui 菜单 底部信息栏设计 底部栏暂分三个模块，使用 element-ui card 组建 我的 参考 其他 效果 暂决定不显示底部栏. Copyright © LYF_Studio 2019 all right reserved，powered by GitbookLast Edit: 2019-04-04 10:08:43 "},"VueDesign/DetailNote.html":{"url":"VueDesign/DetailNote.html","title":"Vue Design 详细设计 笔记","keywords":"","body":"Vue Design 详细设计 笔记 用于每日记录,或者随笔记录 功能如下 添加新的记录,内容至少包括: 标题 日期 内容 列表/修改/删除 按照关键字搜索 展示 使用 element-ui card组件 进行组织 标题,日期在上,内容在下 功能实现 按钮和搜索框 在顶部添加统一功能按钮 在每条信息中添加各自按钮 弹出框 当点击新增或是修改按钮时,需要弹出form表单,捡起放在弹出框中 当点击查看按钮,或是点击卡片本身时,弹出详情展示框 当点击删除按钮时,需要弹出确认框 Copyright © LYF_Studio 2019 all right reserved，powered by GitbookLast Edit: 2019-04-04 10:09:16 "},"Notes/":{"url":"Notes/","title":"Part X: Notes","keywords":"","body":"Notes Copyright © LYF_Studio 2019 all right reserved，powered by GitbookLast Edit: 2019-04-03 14:34:49 "},"Java/":{"url":"Java/","title":"Part I: Java","keywords":"","body":"Part I: Java 官方网站: Oracle Java Java Document Java Download 参考网站: 菜鸟教程 Java教程 Copyright © LYF_Studio 2019 all right reserved，powered by GitbookLast Edit: 2019-04-04 10:33:16 "},"Java/Base.html":{"url":"Java/Base.html","title":"Java 基础","keywords":"","body":"Java 基础 摘自 菜鸟教程 Java简介 Java 简介 Java是由Sun Microsystems公司于1995年5月推出的Java面向对象程序设计语言和Java平台的总称。由James Gosling和同事们共同研发，并在1995年正式推出。 Java分为三个体系： JavaSE(J2SE)(Java2 Platform Standard Edition，java平台标准版） JavaEE(J2EE)(Java 2 Platform Enterprise Edition，java平台企业版) JavaME(J2ME)(Java 2 Platform Micro Edition，java平台微型版) 2005年6月，JavaOne大会召开，SUN公司公开Java SE 6。此时，Java的各种版本已经更名以取消其中的数字\"2\"：J2EE更名为Java EE, J2SE更名为Java SE，J2ME更名为Java ME。 主要特性 Java语言是简单的： Java语言的语法与C语言和C++语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java丢弃了C++中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java语言不使用指针，而是引用。并提供了自动的废料收集，使得程序员不必为内存管理而担忧。 Java语言是面向对象的： Java语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为implements）。Java语言全面支持动态绑定，而C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。 Java语言是分布式的： Java语言支持Internet应用的开发，在基本的Java应用编程接口中有一个网络应用编程接口（java net），它提供了用于网络应用编程的类库，包括URL、URLConnection、Socket、ServerSocket等。Java的RMI（远程方法激活）机制也是开发分布式应用的重要手段。 Java语言是健壮的： Java的强类型机制、异常处理、垃圾的自动收集等是Java程序健壮性的重要保证。对指针的丢弃是Java的明智选择。Java的安全检查机制使得Java更具健壮性。 Java语言是安全的： Java通常被用在网络环境中，为此，Java提供了一个安全机制以防恶意代码的攻击。除了Java语言具有的许多安全特性以外，Java对通过网络下载的类具有一个安全防范机制（类ClassLoader），如分配不同的名字空间以防替代本地的同名类、字节代码检查，并提供安全管理机制（类SecurityManager）让Java应用设置安全哨兵。 Java语言是体系结构中立的： Java程序（后缀为java的文件）在Java平台上被编译为体系结构中立的字节码格式（后缀为class的文件），然后可以在实现这个Java平台的任何系统中运行。这种途径适合于异构的网络环境和软件的分发。 Java语言是可移植的： 这种可移植性来源于体系结构中立性，另外，Java还严格规定了各个基本数据类型的长度。Java系统本身也具有很强的可移植性，Java编译器是用Java实现的，Java的运行环境是用ANSI C实现的。 Java语言是解释型的： 如前所述，Java程序在Java平台上被编译为字节码格式，然后可以在实现这个Java平台的任何系统中运行。在运行时，Java平台中的Java解释器对这些字节码进行解释执行，执行过程中需要的类在联接阶段被载入到运行环境中。 Java是高性能的： 与那些解释型的高级脚本语言相比，Java的确是高性能的。事实上，Java的运行速度随着JIT(Just-In-Time）编译器技术的发展越来越接近于C++。 Java语言是多线程的： 在Java语言中，线程是一种特殊的对象，它必须由Thread类或其子（孙）类来创建。通常有两种方法来创建线程：其一，使用型构为Thread(Runnable)的构造子将一个实现了Runnable接口的对象包装成一个线程，其二，从Thread类派生出子类并重写run方法，使用该子类创建的对象即为线程。值得注意的是Thread类已经实现了Runnable接口，因此，任何一个线程均有它的run方法，而run方法中包含了线程所要运行的代码。线程的活动由一组方法来控制。Java语言支持多个线程的同时执行，并提供多线程之间的同步机制（关键字为synchronized）。 Java语言是动态的： Java语言的设计目标之一是适应于动态变化的环境。Java程序需要的类能够动态地被载入到运行环境，也可以通过网络来载入所需要的类。这也有利于软件的升级。另外，Java中的类有一个运行时刻的表示，能进行运行时刻的类型检查。 Copyright © LYF_Studio 2019 all right reserved，powered by GitbookLast Edit: 2019-04-04 10:33:37 "},"Java/InstallAndConfig.html":{"url":"Java/InstallAndConfig.html","title":"Java 安装配置","keywords":"","body":"Java 安装配置 摘自 菜鸟教程 Java开发环境配置 只概述Windows下的安装配置 安装 先 下载JDK 配置 安装完成后: 右击 \"我的电脑\" -> 点击\"属性\" -> \"高级系统设置\" -> \"高级\"选项卡 -> \"环境变量\" 添加(若以存在则编辑)一下环境变量: JAVA_HOME -> C:\\Program Files\\Java\\jdk1.8.0_201 //要根据自己的实际路径配置 CLASSPATH -> .;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar; //记得前面有个\".\" Path -> %JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin; 注意：如果使用1.5以上版本的JDK，不用设置CLASSPATH环境变量，也可以正常编译和运行Java程序。 测试是否安装成功 \"开始\" -> \"运行\" -> 键入\"cmd\" -> 运行以下命令 $ java -version // 以下出现版本号时,表明安装成功 java version \"1.8.0_201\" Java(TM) SE Runtime Environment (build 1.8.0_201-b09) Java HotSpot(TM) 64-Bit Server VM (build 25.201-b09, mixed mode) Copyright © LYF_Studio 2019 all right reserved，powered by GitbookLast Edit: 2019-04-04 10:34:00 "},"Java/HelloWorld.html":{"url":"Java/HelloWorld.html","title":"Java HelloWorld","keywords":"","body":"Java HelloWorld 基本语法 编写Java程序时，应注意以下几点： 大小写敏感：Java是大小写敏感的，这就意味着标识符Hello与hello是不同的。 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记Java是大小写敏感的），文件名的后缀为.java。（如果文件名和类名不相同则会导致编译错误）。 主方法入口：所有的Java 程序由public static void main(String []args)方法开始执行 创建一个新的java文件 新建文件 HelloWorld.java , 内容如下: public class HelloWorld { public static void main(String []args) { System.out.println(\"Hello World !\"); } } 编译运行 打开命令行,切换到此工作目录,然后执行以下操作 $ javac HelloWorld.java // 此时,工作目录中会出现一个名为 HelloWorld.class 的文件,这是编译过的Java文件 $ java HelloWorld // 注意,使用java命令时,后接类名即可,不要带后缀 Hello World 打印出 \"Hello World !\" 字样,表明第一个java文件运行成功. Copyright © LYF_Studio 2019 all right reserved，powered by GitbookLast Edit: 2019-04-04 10:34:17 "},"Java/TomcatInstallAndConfig.html":{"url":"Java/TomcatInstallAndConfig.html","title":"Java Tomcat安装配置","keywords":"","body":"Java Tomcat安装配置 下载 Tomcat 官网 Tomcat 下载地址 测试是否可用 将压缩包解压出来,进入目录 unzipDir/bin/ ,运行 startup.bat(.sh) // windows 使用双击即可,其他可使用命令 $ ./startup.sh 此时会提示服务在xxxms内启动,使用浏览器打开 http://localhost:8080, 看到以下页面,说明可运行 解压和配置 将Tomcat压缩包解压到指定目录,暂指定 D:\\tools\\apache-tomcat-9.0.16\\ ,然后进行环境变量配置 右击 “我的电脑” -> 点击”属性” -> “高级系统设置” -> “高级”选项卡 -> “环境变量” 添加(若已存在则编辑追加)一下环境变量: CATALINA_BASE -> D:\\tools\\apache-tomcat-9.0.16 CATALINA_HOME -> D:\\tools\\apache-tomcat-9.0.16 CLASSPATH -> %CATALINA_HOME%\\lib\\servlet-api.jar; PATH -> %CATALINA_HOME%\\bin;%CATALINA_HOME%\\lib; 测试是否配置成功 打开命令行工具,输入命令 $ startup 同样打开浏览器,输入 http://localhost:8080, 看到以下页面,说明可运行.图片同上. 请勿执行 shutdown 命令! Copyright © LYF_Studio 2019 all right reserved，powered by GitbookLast Edit: 2019-04-04 10:32:52 "},"Java/DebugUnrecognizedZh.html":{"url":"Java/DebugUnrecognizedZh.html","title":"Java Debug 中文乱码","keywords":"","body":"Java Debug 中文乱码 指定编码 $ javac -encoding UTF-8 XXX.java 当使用java命令时,会遇到中文乱码的问题,可以执行以下命令: $ export JAVA_TOOL_OPTIONS=-Dfile.encoding=UTF8 再执行java命令即可. $ java XXX Copyright © LYF_Studio 2019 all right reserved，powered by GitbookLast Edit: 2019-04-04 10:32:19 "},"MySQL/":{"url":"MySQL/","title":"Part I: MySQL","keywords":"","body":"Part I: MySQL 官方网站: MySQL 官网 MySQL 官方下载地址 其他连接: 菜鸟教程 MySQL教程 简介 以下内容源自 菜鸟教程 MySQL教程 MySQL 是最流行的关系型数据库管理系统，在 WEB 应用方面 MySQL 是最好的 RDBMS(Relational Database Management System：关系数据库管理系统)应用软件之一。 什么是数据库？ 数据库（Database）是按照数据结构来组织、存储和管理数据的仓库。 每个数据库都有一个或多个不同的 API 用于创建，访问，管理，搜索和复制所保存的数据。 我们也可以将数据存储在文件中，但是在文件中读写数据速度相对较慢。 所以，现在我们使用关系型数据库管理系统（RDBMS）来存储和管理的大数据量。所谓的关系型数据库，是建立在关系模型基础上的数据库，借助于集合代数等数学概念和方法来处理数据库中的数据。 RDBMS 即关系数据库管理系统(Relational Database Management System)的特点： 数据以表格的形式出现 每行为各种记录名称 每列为记录名称所对应的数据域 许多的行和列组成一张表单 若干的表单组成database RDBMS 术语 在我们开始学习MySQL 数据库前，让我们先了解下RDBMS的一些术语： 数据库: 数据库是一些关联表的集合。 数据表: 表是数据的矩阵。在一个数据库中的表看起来像一个简单的电子表格。 列: 一列(数据元素) 包含了相同的数据, 例如邮政编码的数据。 行：一行（=元组，或记录）是一组相关的数据，例如一条用户订阅的数据。 冗余：存储两倍数据，冗余降低了性能，但提高了数据的安全性。 主键：主键是唯一的。一个数据表中只能包含一个主键。你可以使用主键来查询数据。 外键：外键用于关联两个表。 复合键：复合键（组合键）将多个列作为一个索引键，一般用于复合索引。 索引：使用索引可快速访问数据库表中的特定信息。索引是对数据库表中一列或多列的值进行排序的一种结构。类似于书籍的目录。 参照完整性: 参照的完整性要求关系中不允许引用不存在的实体。与实体完整性是关系模型必须满足的完整性约束条件，目的是保证数据的一致性。 MySQL 为关系型数据库(Relational Database Management System), 这种所谓的\"关系型\"可以理解为\"表格\"的概念, 一个关系型数据库由一个或数个表格组成, 如图所示的一个表格: 表头(header): 每一列的名称; 列(col): 具有相同数据类型的数据的集合; 行(row): 每一行用来描述某条记录的具体信息; 值(value): 行的具体信息, 每个值必须与该列的数据类型相同; 键(key): 键的值在当前列中具有唯一性。 Copyright © LYF_Studio 2019 all right reserved，powered by GitbookLast Edit: 2019-04-08 10:04:14 "},"MySQL/AccountAndPassword.html":{"url":"MySQL/AccountAndPassword.html","title":"MySQL 账号密码","keywords":"","body":"MySQL 账号密码 公司电脑: A: root@localhost P: Afei... Copyright © LYF_Studio 2019 all right reserved，powered by GitbookLast Edit: 2019-04-04 11:02:45 "},"MySQL/InstallAndConfig.html":{"url":"MySQL/InstallAndConfig.html","title":"MySQL 安装配置","keywords":"","body":"MySQL 安装配置 以下内容源自 菜鸟教程 MySQL安装 下载 所有平台的 MySQL 下载地址为： MySQL 下载 以下以Windows安装为例: 打开网址,选择要下载的安装包: 选择不登陆,直接下载: 安装配置 将下载好的压缩包解压到 D:\\tools\\mysql-8.0.15-winx64 目录下,再进行后续操作. 接下来我们需要配置下 MySQL 的配置文件 打开刚刚解压的文件夹 D:\\tools\\mysql-8.0.15-winx64 ，在该文件夹下创建 my.ini 配置文件，编辑 my.ini 配置以下基本信息： [mysql] # 设置mysql客户端默认字符集 default-character-set=utf8 [mysqld] # 设置3306端口 port = 3306 # 设置mysql的安装目录 basedir=D:\\\\tools\\\\mysql-8.0.15-winx64 # 设置 mysql数据库的数据的存放目录，MySQL 8+ 不需要以下配置，系统自己生成即可，否则有可能报错 # datadir=D:\\\\tools\\\\sqldata # 允许最大连接数 max_connections=20 # 服务端使用的字符集默认为8比特编码的latin1字符集 character-set-server=utf8 # 创建新表时将使用的默认存储引擎 default-storage-engine=INNODB 启动下 MySQL 数据库 以管理员身份打开 windows命令行工具 (C:\\Windows\\System32\\cmd.exe),切换到mysql的解压目录 $ C:\\WINDOWS\\system32>D: $ D:\\>cd tools $ D:\\tools>cd mysql-8.0.15-winx64 $ D:\\tools\\mysql-8.0.15-winx64>cd bin $ D:\\tools\\mysql-8.0.15-winx64\\bin> 初始化数据库 $ mysqld.exe --initialize --console 2019-03-04T11:24:45.451166Z 0 [System] [MY-013169] [Server] D:\\tools\\mysql-8.0.15-winx64\\bin\\mysqld.exe (mysqld 8.0.15) initializing of server in progress as process 1696 2019-03-04T11:24:45.454317Z 0 [Warning] [MY-013242] [Server] --character-set-server: 'utf8' is currently an alias for the character set UTF8MB3, but will be analias for UTF8MB4 in a future release. Please consider using UTF8MB4 in order to be unambiguous. 2019-03-04T11:24:49.886106Z 5 [Note] [MY-010454] [Server] A temporary password is generated for root@localhost: o_5cRs?ckQn7 2019-03-04T11:24:51.420665Z 0 [System] [MY-013170] [Server] D:\\tools\\mysql-8.0.15-winx64\\bin\\mysqld.exe (mysqld 8.0.15) initializing of server has completed 其中, o_5cRs?ckQn7 就是初始密码,后续登陆需要用到,你也可以再登陆后修改密码 输入以下安装命令: $ mysqld.exe install Service successfully installed. 启动输入以下命令即可: C:\\WINDOWS\\system32>net start mysql 请求的服务已经启动。 请键入 NET HELPMSG 2182 以获得更多的帮助。 Copyright © LYF_Studio 2019 all right reserved，powered by GitbookLast Edit: 2019-04-04 10:58:09 "},"MySQL/SystemDB.html":{"url":"MySQL/SystemDB.html","title":"MySQL 系统数据库介绍","keywords":"","body":"MySQL 系统数据库介绍 自带的4个系统数据库：information_schema、mysql、performance_schema、sys； information_schema 这个数据库保存了mysql服务器所有数据库的信息。比如数据库的名、数据库的表、访问权限、数据库表的数据类型，数据库索引的信息等等。 performance_schema 主要用于收集数据库服务器性能参数，可用于监控服务器在一个较低级别的运行过程中的资源消耗、资源等待等情况。 链接：performance_schema全方位介绍 sys 库中所有的数据源来自：performance_schema。目标是把performance_schema的把复杂度降低，让DBA能更好的阅读这个库里的内容。让DBA更快的了解DB的运行情况。 链接： MYSQL的SYS数据库 mysql mysql的核心数据库，类似于sql server中的master表，主要负责存储数据库的用户、权限设置、关键字等mysql自己需要使用的控制和管理信息。 Copyright © LYF_Studio 2019 all right reserved，powered by GitbookLast Edit: 2019-04-04 10:58:29 "},"MySQL/BasicOperation.html":{"url":"MySQL/BasicOperation.html","title":"MySQL 基本操作","keywords":"","body":"MySQL 基本操作 登陆 MySQL登陆命令格式如下,当在本机运行时,可省略 -h 选项. mysql -h 主机名 -u 用户名 -p Enter password: 打开 windows命令行工具, 切换到mysql解压目录,然后执行: D:\\tools\\mysql-8.0.15-winx64\\bin>mysql.exe -u root -p Enter password: ************ Welcome to the MySQL monitor. Commands end with ; or \\g. Your MySQL connection id is 8 Server version: 8.0.15 Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved. Oracle is a registered trademark of Oracle Corporation and/or its affiliates. Other names may be trademarks of their respective owners. Type 'help;' or '\\h' for help. Type '\\c' to clear the current input statement. mysql> 此时已经登陆MySQL. 输入 exit 或 quit 命令,即可退出登陆. 使用命令修改密码 D:\\tools\\mysql-8.0.15-winx64\\bin>mysql.exe -uroot -p Enter password: *********** Welcome to the MySQL monitor. Commands end with ; or \\g. Your MySQL connection id is 11 Server version: 8.0.15 MySQL Community Server - GPL Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved. Oracle is a registered trademark of Oracle Corporation and/or its affiliates. Other names may be trademarks of their respective owners. Type 'help;' or '\\h' for help. Type '\\c' to clear the current input statement. mysql> ALTER user 'root'@'localhost' IDENTIFIED BY 'new_password'; Query OK, 0 rows affected (0.04 sec) mysql> 使用数据库辅助工具修改密码 Navicat 打开navicat,并连接数据库: 点击工具栏中的 用户 ,就可以查看所有的mysql用户 双击要修改密码的用户,输入新密码,点击保存即可 Copyright © LYF_Studio 2019 all right reserved，powered by GitbookLast Edit: 2019-04-04 10:59:55 "},"MySQL/DebugOfDenied.html":{"url":"MySQL/DebugOfDenied.html","title":"MySQL Debug Install/Remove of the Service Denied","keywords":"","body":"MySQL Debug Install/Remove of the Service Denied 在windos 的cmd下安装mysql,在mysql的bin目录下面执行： mysqld --install 报错,信息如下： Install/Remove of the Service Denied 解决办法： 打开cmd.exe程序的时候选择“用管理员身份打开”。 Copyright © LYF_Studio 2019 all right reserved，powered by GitbookLast Edit: 2019-04-08 10:05:25 "},"MongoDB/":{"url":"MongoDB/","title":"Part II: MongoDB","keywords":"","body":"Part II: MongoDB 官方网站: MongoDB 官网 MongoDB 中文社区 相关网站: Robo 3T & Studio 3T 管理工具 MongoDB 菜鸟教程 Windows平台安装启动MongoDB 参考 Windows 平台安装 MongoDB 菜鸟教程 Copyright © LYF_Studio 2019 all right reserved，powered by GitbookLast Edit: 2019-04-08 09:59:45 "},"IDEA/":{"url":"IDEA/","title":"Part I: IDEA","keywords":"","body":"Part I: IDEA Copyright © LYF_Studio 2019 all right reserved，powered by GitbookLast Edit: 2019-04-04 11:11:24 "},"IDEA/Install.html":{"url":"IDEA/Install.html","title":"IDEA 安装","keywords":"","body":"IDEA 安装 安装 官网下载 IDEA 注册码 查看 IDEA 2019(注册码) N757JE0KCT-eyJsaWNlbnNlSWQiOiJONzU3SkUwS0NUIiwibGljZW5zZWVOYW1lIjoid3UgYW5qdW4iLCJhc3NpZ25lZU5hbWUiOiIiLCJhc3NpZ25lZUVtYWlsIjoiIiwibGljZW5zZVJlc3RyaWN0aW9uIjoiRm9yIGVkdWNhdGlvbmFsIHVzZSBvbmx5IiwiY2hlY2tDb25jdXJyZW50VXNlIjpmYWxzZSwicHJvZHVjdHMiOlt7ImNvZGUiOiJJSSIsInBhaWRVcFRvIjoiMjAyMC0wMS0wNyJ9LHsiY29kZSI6IkFDIiwicGFpZFVwVG8iOiIyMDIwLTAxLTA3In0seyJjb2RlIjoiRFBOIiwicGFpZFVwVG8iOiIyMDIwLTAxLTA3In0seyJjb2RlIjoiUFMiLCJwYWlkVXBUbyI6IjIwMjAtMDEtMDcifSx7ImNvZGUiOiJHTyIsInBhaWRVcFRvIjoiMjAyMC0wMS0wNyJ9LHsiY29kZSI6IkRNIiwicGFpZFVwVG8iOiIyMDIwLTAxLTA3In0seyJjb2RlIjoiQ0wiLCJwYWlkVXBUbyI6IjIwMjAtMDEtMDcifSx7ImNvZGUiOiJSUzAiLCJwYWlkVXBUbyI6IjIwMjAtMDEtMDcifSx7ImNvZGUiOiJSQyIsInBhaWRVcFRvIjoiMjAyMC0wMS0wNyJ9LHsiY29kZSI6IlJEIiwicGFpZFVwVG8iOiIyMDIwLTAxLTA3In0seyJjb2RlIjoiUEMiLCJwYWlkVXBUbyI6IjIwMjAtMDEtMDcifSx7ImNvZGUiOiJSTSIsInBhaWRVcFRvIjoiMjAyMC0wMS0wNyJ9LHsiY29kZSI6IldTIiwicGFpZFVwVG8iOiIyMDIwLTAxLTA3In0seyJjb2RlIjoiREIiLCJwYWlkVXBUbyI6IjIwMjAtMDEtMDcifSx7ImNvZGUiOiJEQyIsInBhaWRVcFRvIjoiMjAyMC0wMS0wNyJ9LHsiY29kZSI6IlJTVSIsInBhaWRVcFRvIjoiMjAyMC0wMS0wNyJ9XSwiaGFzaCI6IjExNTE5OTc4LzAiLCJncmFjZVBlcmlvZERheXMiOjAsImF1dG9Qcm9sb25nYXRlZCI6ZmFsc2UsImlzQXV0b1Byb2xvbmdhdGVkIjpmYWxzZX0=-AE3x5sRpDellY4SmQVy2Pfc2IT7y1JjZFmDA5JtOv4K5gwVdJOLw5YGiOskZTuGu6JhOi50nnd0WaaNZIuVVVx3T5MlXrAuO3kb2qPtLtQ6/n3lp4fIv+6384D4ciEyRWijG7NA9exQx39Tjk7/xqaGk7ooKgq5yquIfIA+r4jlbW8j9gas1qy3uTGUuZQiPB4lv3P5OIpZzIoWXnFwWhy7s//mjOWRZdf/Du3RP518tMk74wizbTeDn84qxbM+giNAn+ovKQRMYHtLyxntBiP5ByzfAA9Baa5TUGW5wDiZrxFuvBAWTbLrRI0Kd7Nb/tB9n1V9uluB2WWIm7iMxDg==-MIIElTCCAn2gAwIBAgIBCTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE4MTEwMTEyMjk0NloXDTIwMTEwMjEyMjk0NlowaDELMAkGA1UEBhMCQ1oxDjAMBgNVBAgMBU51c2xlMQ8wDQYDVQQHDAZQcmFndWUxGTAXBgNVBAoMEEpldEJyYWlucyBzLnIuby4xHTAbBgNVBAMMFHByb2QzeS1mcm9tLTIwMTgxMTAxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxcQkq+zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEkrJMO/5oUfQJbLLuMSMK0QHFmaI37WShyxZcfRCidwXjot4zmNBKnlyHodDij/78TmVqFl8nOeD5+07B8VEaIu7c3E1N+e1doC6wht4I4+IEmtsPAdoaj5WCQVQbrI8KeT8M9VcBIWX7fD0fhexfg3ZRt0xqwMcXGNp3DdJHiO0rCdU+Itv7EmtnSVq9jBG1usMSFvMowR25mju2JcPFp1+I4ZI+FqgR8gyG8oiNDyNEoAbsR3lOpI7grUYSvkB/xVy/VoklPCK2h0f0GJxFjnye8NT1PAywoyl7RmiAVRE/EKwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQAF8uc+YJOHHwOFcPzmbjcxNDuGoOUIP+2h1R75Lecswb7ru2LWWSUMtXVKQzChLNPn/72W0k+oI056tgiwuG7M49LXp4zQVlQnFmWU1wwGvVhq5R63Rpjx1zjGUhcXgayu7+9zMUW596Lbomsg8qVve6euqsrFicYkIIuUu4zYPndJwfe0YkS5nY72SHnNdbPhEnN8wcB2Kz+OIG0lih3yz5EqFhld03bGp222ZQCIghCTVL6QBNadGsiN/lWLl4JdR3lJkZzlpFdiHijoVRdWeSWqM4y0t23c92HXKrgppoSV18XMxrWVdoSM3nuMHwxGhFyde05OdDtLpCv+jlWf5REAHHA201pAU6bJSZINyHDUTB+Beo28rRXSwSh3OUIvYwKNVeoBY+KwOJ7WnuTCUq1meE6GkKc4D/cXmgpOyW/1SmBz3XjVIi/zprZ0zf3qH5mkphtg6ksjKgKjmx1cXfZAAX6wcDBNaCL+Ortep1Dh8xDUbqbBVNBL4jbiL3i3xsfNiyJgaZ5sX7i8tmStEpLbPwvHcByuf59qJhV/bZOl8KqJBETCDJcY6O2aqhTUy+9x93ThKs1GKrRPePrWPluud7ttlgtRveit/pcBrnQcXOl1rHq7ByB8CFAxNotRUYL9IF5n3wJOgkPojMy6jetQA5Ogc8Sm7RG6vg1yow== Copyright © LYF_Studio 2019 all right reserved，powered by GitbookLast Edit: 2019-04-04 11:12:11 "},"IDEA/ConfigTomcat.html":{"url":"IDEA/ConfigTomcat.html","title":"IDEA 配置Tomcat","keywords":"","body":"IDEA 配置Tomcat 选择菜单栏选项Run -> Edit Configuration 点击左侧“+”，选择Tomcat Server -> Local 在Tomcat Server -> Unnamed -> Server -> Application server项目下，点击 Configuration 按钮 可以改名为 LocalTomcat 选择本地Tomcat服务器,确定 至此,IntelliJ IDEA配置Tomcat完成 Copyright © LYF_Studio 2019 all right reserved，powered by GitbookLast Edit: 2019-04-04 11:12:09 "},"IDEA/DebugUnrecognizedZh.html":{"url":"IDEA/DebugUnrecognizedZh.html","title":"IDEA Debug 中文乱码","keywords":"","body":"IDEA Debug 中文乱码 IntelliJ IDEA 统一设置编码为utf-8编码 查看 CSDN IntelliJ IDEA 统一设置编码为utf-8编码 启动项目时输出信息乱码 特征值 [淇℃伅 [main] org.apache.catalina.startup.VersionLoggerListener.log Server.鏈嶅姟鍣ㄧ増鏈�:] 原因 tamcat输出日志的设定编码不识别对应的字符 解决办法 查看 CSDN 解决tomcat乱码 实际操作:到 tomcat/conf/ 目录下,修改 logging.properties 找到 java.util.logging.ConsoleHandler.encoding = utf-8 这行 更改为 java.util.logging.ConsoleHandler.encoding = GBK Copyright © LYF_Studio 2019 all right reserved，powered by GitbookLast Edit: 2019-04-04 11:13:17 "},"Navicat/":{"url":"Navicat/","title":"Part II: Navicat","keywords":"","body":"Part II: Navicat Copyright © LYF_Studio 2019 all right reserved，powered by GitbookLast Edit: 2019-04-04 11:14:49 "},"Navicat/InstallAndConfig.html":{"url":"Navicat/InstallAndConfig.html","title":"Navicat 安装配置","keywords":"","body":"Navicat 安装配置 下载 Navicat Premium官方下载 激活 本文转自 简书 Navicat Premium 12.1.16.0安装与激活 下载激活工具 注册机下载：Navicat Premium 12注册机，提取密码：RCNJTECH 或已存至本地: Navicat Premium 12 注册机 V4.8 重要提示：该注册机来源于 DeltaFoX（ GitHub )。一般来说，由于注册机会修改.exe文件或.dll文件，加壳并且没有数字签名，所以杀毒软件会报毒，自行决定是否使用本注册机。如需使用本注册机或者下载后找不到文件，需要关闭杀毒软件或将本注册机添加至杀毒软件白名单。 ※※备用方案※※：命令行激活工具，来自 DoubleLabyrinth ，分别适用于 Windows 和 Mac 。请仔细阅读README.md，有问题请到GitHub向该作者提issue。 若曾安装过Navicat Premium且多次激活失败，请先卸载已安装的Navicat Premium并清理文件残留和注册表残留，重启电脑，再次尝试激活。请勿无脑提问！确保Navicat Premium程序已关闭。无需断网，无需将注册机放到Navicat Premium安装目录下。 以管理员身份运行此注册机 打开注册机后，在1) Patch，勾选Backup、Host和Navicat v12，然后点击Patch按钮 找到Navicat Premium 12安装路径下的navicat.exe，选中并点击打开： 此时出现如下弹窗，提示navicat.exe - x64 -> Cracked.，提示已破解（别高兴，还没结束）。 若提示libcc.dll或navicat.exe出错，检查是否未关闭Navicat Premium，或到安装目录下将libcc.dll和navicat.exe删除，并将libcc.dll.BAK或navicat.exe.BAK去掉.BAK后缀名。否则卸载已安装的Navicat Premium并清理文件残留和注册表残留： 2) License, Product and Language确保License为Enterprise，Products为Premium，Languages为Simplified Chinese（即简体中文，其它语言版本如英文版请选择English）； 3) Resale License确保Resale Version为Site license； 4) Keygen / Offline Activation中Your Name和Your Organization可以任意填写或者默认： 在4) Keygen / Offline Activation，点击Generate，将自动生成Serial Keygen（即注册码）： 打开Navicat Premium 12，点击菜单栏的帮助，选择注册，在注册窗口键处填入上一步生成的Serial Keygen（即注册码），然后点击激活 在弹出框中点击 手动激活 ,可以看到生成了请求码 将Navicat手动激活窗口的请求码框中内容复制到注册机Request Code框中，点击Activation Code下面的Generate按钮（若此处出现错误，要么你未完全按照教程来，要么你所安装的版本高于注册机所支持的版本）： 将注册机Activation Code处生成的激活码内容复制到Navicat手动激活窗口的激活码框中（或点击Activation Code处下面的Copy按钮，这样会自动粘贴到Navicat手动激活窗口的激活码框中），然后点击激活按钮： 提示Navicat现已激活： Copyright © LYF_Studio 2019 all right reserved，powered by GitbookLast Edit: 2019-04-04 11:15:53 "},"Eclipse/":{"url":"Eclipse/","title":"Part III: Eclipse","keywords":"","body":"Part III: Eclipse Copyright © LYF_Studio 2019 all right reserved，powered by GitbookLast Edit: 2019-04-04 11:11:24 "},"Eclipse/InstallAndConfig.html":{"url":"Eclipse/InstallAndConfig.html","title":"Eclipse 安装配置","keywords":"","body":"Eclipse 安装配置 Copyright © LYF_Studio 2019 all right reserved，powered by GitbookLast Edit: 2019-04-04 11:11:24 "},"Atom/":{"url":"Atom/","title":"Part IV: Atom","keywords":"","body":"Part IV: Atom Copyright © LYF_Studio 2019 all right reserved，powered by GitbookLast Edit: 2019-04-04 11:11:24 "},"Atom/SyncSetting.html":{"url":"Atom/SyncSetting.html","title":"Atom 配置 sync-setting","keywords":"","body":"Atom 配置 sync-setting 我的配置项 gistId: acd3ce8dfd2b80e52da7d6bd041873e4 token: dec5fc15f37cc0740727a69d34b105f739026c12 Atom 通过sync-settings插件实现同步功能 查看 简书 Atom 通过sync-settings插件实现同步功能 查看 atom.io sync-setting 准备 安装Atom 安装 sync-setting 插件 有一个GitHub账号 步骤 安装sync-setting插件,打开Atom的Setting页面,点击 install,输入要安装的包 打开sync-settings插件设置，你会看到如下界面 我们只需要填入Token以及Gist Id即可（红框标出部分） 每台电脑的Token可以相同也可以不同，不过Token只能看见一次，所以你需要自己保存起来 每台电脑的Gist Id都是相同的，因为你的数据都存放在Gist上。 其他的是一些自定义选项，比如是否需要同步快捷键之类的，建议默认就好。 按下Ctrl-Shift-P打开命令面板 输入 sync-settings:backup 将本机配置上传到gist，成功后如图： 输入 sync-settings:restore 将gist上的配置同步到本机，成功后如图： 如何设置Token 登录GitHub，点击你的头像 => 点击settings => 点击Personal access tokens => 点击Generate new token 随便起一个名字，再将所有的选项全部勾上 点击Generate token创建 将刚生成的Token复制到sync-settings中 注意：Token生成后只能看见一次，如果关闭页面后再次打开就看不见了。 如何设置Gist Id 登录GitHub，点击Gist 在新版面的github中,点击 头像 -> Your gists 此时,可能会发现 https://gist.github.com 被墙了,可以按照以下方法解决: windows下 打开C:\\Windows\\System32\\drivers\\etc\\hosts文件 编辑器打开，在最后行添加192.30.253.118 gist.github.com 保存, over~ 里面随便写一些内容，然后点击创建 创建完成后，将网址冒号后面的内容复制到sync-settings里 两项都设置完成后如下图： 至此,设置完成. Copyright © LYF_Studio 2019 all right reserved，powered by GitbookLast Edit: 2019-04-04 11:18:11 "},"GLOSSARY.html":{"url":"GLOSSARY.html","keywords":"","body":"glossary-description 该文件主要存储词汇信息，如果在其他页面中出现了该文件中的词汇，鼠标放到词汇上会给出词汇示意。 language-list en, ar, bn, cs, de, en, es, fa, fi, fr, he, it, ja, ko, no, pl, pt, ro, ru, sv, uk, vi, zh-hans, zh-tw Copyright © LYF_Studio 2019 all right reserved，powered by GitbookLast Edit: 2019-04-03 14:54:17 "}}